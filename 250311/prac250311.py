
'''
'''
'''
카드 문제
만약 한 쪽이 D이면, 반대쪽은 3이 적혀있을 것이다

D F 3 7

이 중 반드시 뒤집어봐야 하는 카드는 D, 7

맥주집 문제
20세 이하인 사람은 맥주를 마실 수 없음

17 31 콜라 맥주

이 중 반드시 확인해봐야 할 사람은 17, 맥주

만약 맥주집 문제가 더 쉽게 느껴졌다면 맥주집 문제를 사용할 때 논리를 사용한 것이 아님
소프트 로직을 사용함. 직관은 정확하지 않고 자신이 맞다는 강한 착각을 일으킴.

프로그래밍은 하드 로직을 사용함
직관 대신 논리학을 사용
알고리즘을 이해하기 위해서는 하드 로직이 필요함
'''

'''
100점을 맞으면 치킨을 사주겠다

100점을 맞았을 때 치킨을 사줬다 > o
100점을 맞았을 때 치킨을 안 사줬다 > x
100점을 못 맞았을 때 치킨을 사줬다 > o
100점을 못 맞았을 때 치킨을 사줬다 > o
가정이 거짓이면 전체는 항상 참이 된다
'''

'''
p > q
p가 참일 때, q도 참이다.
증명할 수 있는 것이 명제

증명 3가지
1. 대우 증명
p > q
~q > ~p
원래 명제가 참이면
대우 증명도 반드시 참(가정이 거짓이기 때문에)

2. 직접 증명
p > q
가정이 참이 되는 상황을 만들어 q가 참이 됨을 보여줌
보통 p를 쪼개서 사용

3. 간접 증명(모순 증명)
p > q
q가 거짓이라고 가정함
모순이 발생함을 보여주며 q가 거짓이 될 수 없음을 증명

4. 진리표 그리기

'''

'''
논리와 증명
논리적인 사고가 알고리즘 설계와 디버깅에 매우 중요
알고리즘이 정확하다는 것을 증명하기 위해 수학적으로 증명을 해야 한다.

수와 표현
컴퓨터는 데이터를 이진법으로 처리한다.
효율적으로 알고리즘을 설계하기 위해
메모리 관리를 효율적으로 하기 위해
[정수론], [수의 표현] 키워드로 학습

집합과 조합론
귀납법
p(1) = 1라면 p(n) = n이다
n = k일 때 참이라면 n = k+1일 때도 참이다

특정 사례로부터 출발하여 일반적인 규칙을 찾는 방법

귀류법
어떤 명제가 거짓일 수 없다고 가정하고
이로 인해 발생하는 모순을 찾는 방법

'''

'''
두 집합 A와 B에 대해 A가 B의 부분집합임을 증명하는 것은
A의 임의의 원소가 B에 포함됨을 보이는 것

두 집합 A와 B가 같다는 것을 증명하는 것은
A가 B의 부분집합이고 B가 A의 부분집합임을 증명하면 된다

많은 데이터 구조들에서 활용되는 개념
경우의수, 해시, 트리, 경로탐색 등...
'''

'''
기초 수식-시간복잡도 증명
알고리즘의 시간복잡도를 표현할 수 있는 다양한 수식 존재
풀이법을 익혀두어야 시간복잡도 계산 가능. 알고리즘이 시간이 얼마나 걸릴 지 예측 가능.

알고리즘의 효율성 분석과 최적화에 중요
'''

'''
재귀함수

언제 쓰는 것???
N중 반복문이 필요할 때
반복문의 숫자가 정해져있지 않을 때
문제를 작은 문제로 분할할 수 있을 때

언제 재귀함수에서 return을 써야 할까??
작은 문제들의 결과를 큰 문제에서 합쳐야 할 때

동적 프로그래밍
재귀 함수에서 동일한 입력의 함수 호출이 반복적으로 일어날 때
그 결과 값을 저장해두고 불러 쓰는 것
중복된 문제가 많이 발생했을 때 한 번 계산해놓은 결과를 저장해두고
저장된 결과를 재활용하여 중복 계산을 피함

memoization 점화식
이 문제가 dp인지 깨닫는 게 힘들다
많은 문제를 풀어보는 방법밖엔...
'''
